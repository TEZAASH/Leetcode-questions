class Solution{
    private:
    bool isgood(vector<vector<int>>& m,int n,int x,int y,vector<vector<int>>& visited){
        if((x>=0&&x<n)&&(y>=0&&y<n)&&visited[x][y]==0&&m[x][y]==1){
            return true;
        }
        else{
            return false;
        }
    }
    void solve(vector<vector<int>> &m,int n,int x,int y,vector<vector<int>>& visited,vector<string>& ans,string path){
        //base case
        if(x==n-1&&y==n-1){
            ans.push_back(path);
            return;
        }
        visited[x][y]=1;
        //down
        if(isgood(m,n,x+1,y,visited)){
           
            path.push_back('D');
            solve(m,n,x+1,y,visited,ans,path);
            path.pop_back();
           //up 
        }
        if(isgood(m,n,x-1,y,visited)){
            
            path.push_back('U');
            solve(m,n,x-1,y,visited,ans,path);
            path.pop_back();
            
        }
        //right
        if(isgood(m,n,x,y+1,visited)){
            
            path.push_back('R');
            solve(m,n,x,y+1,visited,ans,path);
            path.pop_back();
            
        }
        //left
        if(isgood(m,n,x,y-1,visited)){
            
            path.push_back('L');
            solve(m,n,x,y-1,visited,ans,path);
            path.pop_back();
            
        }
        visited[x][y]=0;
        
        
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
       vector<string> ans;
       int srcx=0;
       int srcy=0;
       vector<vector<int>> visited(n, vector<int>(n, 0));
       if(m[0][0]==0){
           return ans;
       }
       string path="";
       solve(m,n,srcx,srcy,visited,ans,path);
       sort(ans.begin(),ans.end());
       return ans;
       
        
    }
};

 
