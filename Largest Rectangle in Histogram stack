class Solution {


private:
    int n;
    
    void getNextSmallerIdx(vector<int>& res, vector<int>& heights){
        stack<int> s1;
        s1.push(-1);
        
        for(int i=n-1; i>=0; i--){
            int curr = heights[i];
            while(s1.top() != -1 and heights[s1.top()] >= curr){
                s1.pop();
            }
            
            res[i] = s1.top();
            s1.push(i);
        }
    }
    
    void getPrevSmallerIdx(vector<int>& res, vector<int>& heights){
        stack<int> s1;
        s1.push(-1);
        
        for(int i=0; i<n; i++){
            int curr = heights[i];
            while(s1.top() != -1 and heights[s1.top()] >= curr){
                s1.pop();
            }
            
            res[i] = s1.top();
            s1.push(i);
        }
    }
    
public:
    int largestRectangleArea(vector<int>& heights) {
        n = heights.size();
        int res = 0;
        vector<int> nextSmaller(n), prevSmaller(n);
        
        getNextSmallerIdx(nextSmaller, heights);
        getPrevSmallerIdx(prevSmaller, heights);
        
        for(int i=0; i<n; i++){
            int currL = heights[i];
            if(nextSmaller[i] == -1) nextSmaller[i] = n;
            
            int currB = nextSmaller[i] - prevSmaller[i] - 1;
            int area = currL * currB;
            res = max(area, res);
        }
        
        return res;
    }
};
